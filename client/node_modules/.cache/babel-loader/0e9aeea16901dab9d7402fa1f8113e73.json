{"ast":null,"code":"var _jsxFileName = \"/home/paulp/Documents/pumpspy/client/src/containers/stations.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport StationGrid from \"../components/stations/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const StationsContainer = () => {\n  _s();\n\n  const [stations, setStations] = useState([]);\n\n  const getStations = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/stations\");\n      const jsonData = await response.json();\n      setStations(jsonData);\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  const updateDatabasePrice = async (e, fuelType, id, price) => {\n    e.preventDefault();\n\n    try {\n      const body = {\n        price\n      };\n      await fetch(`http://localhost:5000/stations/${fuelType}/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n      window.location = \"/\";\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  useEffect(() => {\n    getStations();\n  }, []);\n\n  const updatePrice = (id, fuelType, price) => {\n    let updatedStations = stations.map(station => station.id === id ? { ...station,\n      [fuelType]: price\n    } : station);\n    setStations(updatedStations);\n    updateDatabasePrice(fuelType, id, price);\n  };\n\n  return /*#__PURE__*/_jsxDEV(StationGrid, {\n    children: stations.map(item => /*#__PURE__*/_jsxDEV(StationGrid.StationRow, {\n      children: [/*#__PURE__*/_jsxDEV(StationGrid.Logo, {\n        src: `images/logos/${item.brand.toLowerCase()}.png`,\n        alt: item.alt\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(StationGrid.InfoBox, {\n        children: [/*#__PURE__*/_jsxDEV(StationGrid.StationInfo, {\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(StationGrid.StationInfo, {\n          children: item.address\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(StationGrid.StationInfo, {\n          children: [\"Last Updated: \", item.updated]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(StationGrid.PriceBox, {\n        children: [/*#__PURE__*/_jsxDEV(StationGrid.PriceRow, {\n          children: [/*#__PURE__*/_jsxDEV(StationGrid.Price, {\n            fuelPrice: item.petrol,\n            children: [\"Petrol:\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StationGrid.EditButton, {\n            src: \"images/icons/edit.png\",\n            alt: \"edit-button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StationGrid.Modal, {\n            id: item.id,\n            price: item.petrol,\n            fuelType: \"petrol\",\n            updatePrice: updatePrice\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(StationGrid.PriceRow, {\n          children: [/*#__PURE__*/_jsxDEV(StationGrid.Price, {\n            fuelPrice: item.diesel,\n            children: [\"Diesel:\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StationGrid.EditButton, {\n            src: \"images/icons/edit.png\",\n            alt: \"edit-button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StationGrid.Modal, {\n            id: item.id,\n            price: item.diesel,\n            fuelType: \"diesel\",\n            updatePrice: updatePrice\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)]\n    }, item.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StationsContainer, \"KV8CcP3gcIUxQ2C9moSCRW/KKrI=\");\n\n_c = StationsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"StationsContainer\");","map":{"version":3,"sources":["/home/paulp/Documents/pumpspy/client/src/containers/stations.js"],"names":["React","useState","useEffect","StationGrid","StationsContainer","stations","setStations","getStations","response","fetch","jsonData","json","error","console","message","updateDatabasePrice","e","fuelType","id","price","preventDefault","body","method","headers","JSON","stringify","window","location","err","updatePrice","updatedStations","map","station","item","brand","toLowerCase","alt","name","address","updated","petrol","diesel"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,8BAAxB;;AAEA,OAAO,MAAMC,iBAAiB,GAAG,MAAM;AAAA;;AACrC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,EAAD,CAAxC;;AAEA,QAAMM,WAAW,GAAG,YAAY;AAC9B,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAD,CAA5B;AACA,YAAMC,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAvB;AAEAL,MAAAA,WAAW,CAACI,QAAD,CAAX;AACD,KALD,CAKE,OAAOE,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAK,CAACE,OAApB;AACD;AACF,GATD;;AAWA,QAAMC,mBAAmB,GAAG,OAAOC,CAAP,EAAUC,QAAV,EAAoBC,EAApB,EAAwBC,KAAxB,KAAkC;AAC5DH,IAAAA,CAAC,CAACI,cAAF;;AACA,QAAI;AACF,YAAMC,IAAI,GAAG;AAAEF,QAAAA;AAAF,OAAb;AACA,YAAMV,KAAK,CACR,kCAAiCQ,QAAS,IAAGC,EAAG,EADxC,EAET;AACEI,QAAAA,MAAM,EAAE,KADV;AAEEC,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB,SAFX;AAGEF,QAAAA,IAAI,EAAEG,IAAI,CAACC,SAAL,CAAeJ,IAAf;AAHR,OAFS,CAAX;AASAK,MAAAA,MAAM,CAACC,QAAP,GAAkB,GAAlB;AACD,KAZD,CAYE,OAAOC,GAAP,EAAY;AACZf,MAAAA,OAAO,CAACD,KAAR,CAAcgB,GAAG,CAACd,OAAlB;AACD;AACF,GAjBD;;AAmBAZ,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,WAAW;AACZ,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMsB,WAAW,GAAG,CAACX,EAAD,EAAKD,QAAL,EAAeE,KAAf,KAAyB;AAC3C,QAAIW,eAAe,GAAGzB,QAAQ,CAAC0B,GAAT,CAAcC,OAAD,IACjCA,OAAO,CAACd,EAAR,KAAeA,EAAf,GAAqB,EAAE,GAAGc,OAAL;AAAc,OAACf,QAAD,GAAYE;AAA1B,KAArB,GAA0Da,OADtC,CAAtB;AAGA1B,IAAAA,WAAW,CAACwB,eAAD,CAAX;AACAf,IAAAA,mBAAmB,CAACE,QAAD,EAAWC,EAAX,EAAeC,KAAf,CAAnB;AACD,GAND;;AAQA,sBACE,QAAC,WAAD;AAAA,cACGd,QAAQ,CAAC0B,GAAT,CAAcE,IAAD,iBACZ,QAAC,WAAD,CAAa,UAAb;AAAA,8BACE,QAAC,WAAD,CAAa,IAAb;AAAkB,QAAA,GAAG,EAAG,gBAAeA,IAAI,CAACC,KAAL,CAAWC,WAAX,EAAyB,MAAhE;AAAuE,QAAA,GAAG,EAAEF,IAAI,CAACG;AAAjF;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,WAAD,CAAa,OAAb;AAAA,gCACE,QAAC,WAAD,CAAa,WAAb;AAAA,oBAA0BH,IAAI,CAACI;AAA/B;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,WAAD,CAAa,WAAb;AAAA,oBAA0BJ,IAAI,CAACK;AAA/B;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,WAAD,CAAa,WAAb;AAAA,uCACiBL,IAAI,CAACM,OADtB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eASE,QAAC,WAAD,CAAa,QAAb;AAAA,gCACE,QAAC,WAAD,CAAa,QAAb;AAAA,kCACE,QAAC,WAAD,CAAa,KAAb;AAAmB,YAAA,SAAS,EAAEN,IAAI,CAACO,MAAnC;AAAA,kCACU,GADV;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE,QAAC,WAAD,CAAa,UAAb;AACE,YAAA,GAAG,EAAE,uBADP;AAEE,YAAA,GAAG,EAAC;AAFN;AAAA;AAAA;AAAA;AAAA,kBAJF,eAQE,QAAC,WAAD,CAAa,KAAb;AACE,YAAA,EAAE,EAAEP,IAAI,CAACf,EADX;AAEE,YAAA,KAAK,EAAEe,IAAI,CAACO,MAFd;AAGE,YAAA,QAAQ,EAAE,QAHZ;AAIE,YAAA,WAAW,EAAEX;AAJf;AAAA;AAAA;AAAA;AAAA,kBARF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAgBE,QAAC,WAAD,CAAa,QAAb;AAAA,kCACE,QAAC,WAAD,CAAa,KAAb;AAAmB,YAAA,SAAS,EAAEI,IAAI,CAACQ,MAAnC;AAAA,kCACU,GADV;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE,QAAC,WAAD,CAAa,UAAb;AACE,YAAA,GAAG,EAAE,uBADP;AAEE,YAAA,GAAG,EAAC;AAFN;AAAA;AAAA;AAAA;AAAA,kBAJF,eAQE,QAAC,WAAD,CAAa,KAAb;AACE,YAAA,EAAE,EAAER,IAAI,CAACf,EADX;AAEE,YAAA,KAAK,EAAEe,IAAI,CAACQ,MAFd;AAGE,YAAA,QAAQ,EAAE,QAHZ;AAIE,YAAA,WAAW,EAAEZ;AAJf;AAAA;AAAA;AAAA;AAAA,kBARF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,cATF;AAAA,OAA6BI,IAAI,CAACf,EAAlC;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAgDD,CA7FM;;GAAMd,iB;;KAAAA,iB","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport StationGrid from \"../components/stations/index\";\n\nexport const StationsContainer = () => {\n  const [stations, setStations] = useState([]);\n\n  const getStations = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/stations\");\n      const jsonData = await response.json();\n\n      setStations(jsonData);\n    } catch (error) {\n      console.error(error.message);\n    }\n  }\n\n  const updateDatabasePrice = async (e, fuelType, id, price) => {\n    e.preventDefault();\n    try {\n      const body = { price };\n      await fetch(\n        `http://localhost:5000/stations/${fuelType}/${id}`,\n        {\n          method: \"PUT\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(body)\n        }\n      );\n\n      window.location = \"/\";\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  useEffect(() => {\n    getStations();\n  }, []);\n\n  const updatePrice = (id, fuelType, price) => {\n    let updatedStations = stations.map((station) =>\n      station.id === id ? ({ ...station, [fuelType]: price }) : station\n    );\n    setStations(updatedStations);\n    updateDatabasePrice(fuelType, id, price)\n  };\n\n  return (\n    <StationGrid>\n      {stations.map((item) => (\n        <StationGrid.StationRow key={item.id}>\n          <StationGrid.Logo src={`images/logos/${item.brand.toLowerCase()}.png`} alt={item.alt} />\n          <StationGrid.InfoBox>\n            <StationGrid.StationInfo>{item.name}</StationGrid.StationInfo>\n            <StationGrid.StationInfo>{item.address}</StationGrid.StationInfo>\n            <StationGrid.StationInfo>\n              Last Updated: {item.updated}\n            </StationGrid.StationInfo>\n          </StationGrid.InfoBox>\n          <StationGrid.PriceBox>\n            <StationGrid.PriceRow>\n              <StationGrid.Price fuelPrice={item.petrol}>\n                Petrol:{\" \"}\n              </StationGrid.Price>\n              <StationGrid.EditButton\n                src={\"images/icons/edit.png\"}\n                alt=\"edit-button\"\n              />\n              <StationGrid.Modal\n                id={item.id}\n                price={item.petrol}\n                fuelType={\"petrol\"}\n                updatePrice={updatePrice}\n              />\n            </StationGrid.PriceRow>\n            <StationGrid.PriceRow>\n              <StationGrid.Price fuelPrice={item.diesel}>\n                Diesel:{\" \"}\n              </StationGrid.Price>\n              <StationGrid.EditButton\n                src={\"images/icons/edit.png\"}\n                alt=\"edit-button\"\n              />\n              <StationGrid.Modal\n                id={item.id}\n                price={item.diesel}\n                fuelType={\"diesel\"}\n                updatePrice={updatePrice}\n              />\n            </StationGrid.PriceRow>\n          </StationGrid.PriceBox>\n        </StationGrid.StationRow>\n      ))}\n    </StationGrid>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}